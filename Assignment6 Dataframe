# -*- coding: utf-8 -*-
"""
Created on Mon Aug 26 12:06:05 2019

@author: Sabie
"""

import pandas as pd
import numpy as np
import os
import random
import math

os.listdir()


df=pd.DataFrame({"Dates":pd.date_range("2017-05-05",periods=8),
                 "A":np.random.randn(8),
                 "B":np.random.randn(8),
                 "C":np.random.randn(8),
                 })
print(df)


#Perform the following task:
#a. View the top 5 records
df.head()
df[0:5]

#b. View the last 5 records 
df.tail(5)
df[-5:]

#c. View statistic summary of the data 
df.describe()

#d. Find the maximum values of A 
df.A.max()
df["A"].max()
np.max(df.A)



#e. Find maximum values of B along with its date. 
df[df.B==df.B.max()][['Dates','B']]
df[['Dates','B']][df.B==df.B.max()]


#f. Add a new column ‘Sum’ with the total sum of A, B & C
df["SUM"]=df.sum(axis=1)
print(df)

#g. Multiply 100 in column A, B and C.#
df[["A",'B','C']]=df[["A",'B','C']]*100

#h. Give index name as Day1 to Day8.
df.index=["Day"+str(num) for num in np.arange(1,9)]

#i. Extract 4th to 6th row data.
df[3:6]
df['Day4':'Day6']

#j. Extract all the records of C for day 5 to day 8.
df.iloc[4:9,-1]
df.iloc[4:9,3]
df.C[4:9]
df["C"][4:9]
df['Day5':'Day8']["C"]

#Q2
exam_data =pd.DataFrame({'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'], 
                         'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19], 
                         'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1], 
                         'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no','yes']},
    index=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'])

#a. Write a Python program to select the 'name' and 'score' columns from the following DataFrame 
exam_data.name;exam_data.score
exam_data[["name","score"]]
exam_data.iloc[:,0:2]
exam_data.ix[:,"name":"score"]

#b. Write a Python program to get the first 3 rows of a given DataFrame 
exam_data.head(3)
exam_data[0:3]
exam_data.iloc[0:3,]
exam_data.ix['a':'c']
exam_data['a':'c']

#c. Select 'name' and 'score' columns in rows 1, 3, 5, 6 from the following data frame. 
exam_data.iloc[[0,2,4,5],0:2]
exam_data.ix[['a','c','e','f'],['name','score']]
exam_data.ix[['a','c','e','f'],'name':'score']

#d. Write a Python program to select the rows where the number of attempts in the examination is 
#greater than 2.
exam_data[exam_data.attempts>2]
exam_data[exam_data["attempts"]>2]


#e. Write a Python program to select the rows where the score is missing, i.e. is NaN. 
#Replace it with 0. 
exam_data.isnull().sum()
exam_data[exam_data.isna().any(axis=1)]
exam_data[exam_data.isnull().any(axis=1)]
exam_data.isna().values.any(axis=1)
#replacing na
exam_data.replace(np.NaN,0)
exam_data=exam_data.fillna(0)

#f. Write a Python program to select the rows the score is between 15 and 20. '
exam_data[((exam_data['score']>15)&(exam_data.score<20))]
exam_data.where((exam_data['score']>15)&(exam_data.score<20))

#g. Write a Python program to select the rows where number of attempts in the examination 
#is less than 2 and score greater than 15. 
#greater than 2.
exam_data[(exam_data.attempts<2)&(exam_data.score>15)]

#h. Write a Python program to change the score in row 'd' to 11.5.

exam_data.score[3]=11.5

exam_data.score["d"]=11.5

exam_data["score"]["d"]=11.5

exam_data.iloc[3,1]=11.5

#i. Write a Python program to replace the 'qualify' column contains the values 
#'yes' and 'no' with True and False. 
exam_data.replace(to_replace='yes',value=True)
exam_data.replace(to_replace='no',value=False)

#j. Write a Python program to change the name 'James' to 'Suresh' in name column of the DataFrame.
exam_data.replace(to_replace='James',value='Suresh')
exam_data.name[exam_data.name=='James']='Suresh'
